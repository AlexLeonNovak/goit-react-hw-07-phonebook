{"version":3,"sources":["libs/pnotify.js","Styles.js","redux/contacts/contacts.actions.js","redux/contacts/contacts.selectors.js","redux/contacts/contacts.operations.js","redux/contacts/contacts.reducer.js","components/Form/Form.js","components/ContactList/styles.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["defaults","styling","icons","Container","styled","div","displayName","FormElement","form","FormGroup","Label","label","Input","input","Button","button","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","getFilter","state","contacts","filter","getLoading","loading","getAllContacts","items","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","trim","contact","name","includes","phone","axios","baseURL","fetchContacts","dispatch","actions","console","log","get","then","data","catch","error","addContact","post","deleteContact","id","delete","createReducer","_","payload","isLoadingAction","action","type","endsWith","isEndLoadingAction","builder","addMatcher","combineReducers","initState","Form","onInputChange","e","target","value","setState","onFormSubmit","preventDefault","props","some","notice","title","text","inputNameId","shortid","generate","inputPhoneId","onSubmit","this","htmlFor","onChange","pattern","required","Component","connect","contactsSelectors","contactsOperations","Li","li","ContactList","onDeleteClick","useEffect","length","map","onClick","className","defaultProps","onFilterInput","contactsActions","inputFilterId","App","StrictMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e24e6ba.chunk.js","sourcesContent":["import { defaults, notice } from '@pnotify/core';\r\nimport '@pnotify/core/dist/PNotify.css';\r\nimport '@pnotify/core/dist/Material.css';\r\nimport 'material-design-icon-fonts/iconfont/material-icons.css';\r\n\r\ndefaults.styling = 'material';\r\ndefaults.icons = 'material';\r\n\r\nexport { notice };\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n\twidth: 1170px;\r\n\tmargin: 0 auto;\r\n\tpadding: 0 15px;\r\n`;\r\nContainer.displayName = 'Container';\r\nexport const FormElement = styled.form`\r\n\twidth: 50%;\r\n\tborder: 1px solid #555;\r\n\tborder-radius: 5px;\r\n\tpadding: 15px;\r\n\tmargin-bottom: 15px;\r\n`;\r\nFormElement.displayName = 'FormElement';\r\n\r\nexport const FormGroup = styled.div`\r\n\tdisplay: flex;\r\n\tmargin-top: 10px;\r\n`;\r\nFormGroup.displayName = 'FormGroup';\r\n\r\nexport const Label = styled.label`\r\n\tflex-basis: 20%;\r\n`;\r\nLabel.displayName = 'Label';\r\n\r\nexport const Input = styled.input`\r\n\tborder: 1px solid #000;\r\n\tbackground: #fff;\r\n\tcolor: #000;\r\n\tpadding: 5px 15px;\r\n`;\r\nInput.displayName = 'Input';\r\n\r\nexport const Button = styled.button`\r\n\tborder: 1px solid #000;\r\n\tbackground: #fff;\r\n\tcolor: #000;\r\n\tpadding: 5px 15px;\r\n\ttransition: all 200ms ease-in-out;\r\n\tfont-size: 16px;\r\n\talign-items: center;\r\n\tdisplay: inline-flex;\r\n\t&:hover {\r\n\t\tbackground: #000;\r\n\t\tcolor: #fff;\r\n\t}\r\n`;\r\nButton.displayName = 'Button';\r\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n\t'contact/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n\t'contact/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contact/fetchContactsError');\n\nexport const addContactRequest = createAction('contact/addContactRequest');\nexport const addContactSuccess = createAction('contact/addContactSuccess');\nexport const addContactError = createAction('contact/addContactError');\n\nexport const deleteContactRequest = createAction(\n\t'contact/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n\t'contact/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contact/deleteContactError');\n\nexport const changeFilter = createAction('contact/filter');\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getLoading = state => state.contacts.loading;\n\nexport const getAllContacts = state => state.contacts.items;\n\nexport const getFilteredContacts = createSelector(\n\t[getFilter, getAllContacts],\n\t(filter, contacts) => {\n\t\tconst normalizedFilter = filter.toLowerCase().trim();\n\t\treturn contacts.filter(\n\t\t\tcontact =>\n\t\t\t\tcontact.name.toLowerCase().trim().includes(normalizedFilter) ||\n\t\t\t\tcontact.phone.toLowerCase().trim().includes(normalizedFilter),\n\t\t);\n\t},\n);\n","import axios from 'axios';\nimport * as actions from './contacts.actions';\n\naxios.defaults.baseURL = 'http://localhost:3333';\n\nexport const fetchContacts = () => dispatch => {\n\tdispatch(actions.fetchContactsRequest());\n\tconsole.log('fetchContacts');\n\taxios\n\t\t.get('/contacts')\n\t\t.then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n\t\t.catch(error => dispatch(actions.fetchContactsError(error)));\n};\n\nexport const addContact = contact => dispatch => {\n\tdispatch(actions.addContactRequest());\n\n\taxios\n\t\t.post('/contacts', contact)\n\t\t.then(({ data }) => dispatch(actions.addContactSuccess(data)))\n\t\t.catch(error => dispatch(actions.addContactError(error)));\n};\n\nexport const deleteContact = id => dispatch => {\n\tdispatch(actions.deleteContactRequest());\n\n\taxios\n\t\t.delete(`/contacts/${id}`)\n\t\t.then(() => dispatch(actions.deleteContactSuccess(id)))\n\t\t.catch(error => dispatch(actions.deleteContactError(error)));\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './contacts.actions';\n\nconst items = createReducer([], {\n\t[actions.fetchContactsSuccess]: (_, { payload }) => payload,\n\t[actions.addContactSuccess]: (state, { payload }) => [payload, ...state],\n\t[actions.deleteContactSuccess]: (state, { payload }) =>\n\t\tstate.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n\t[actions.changeFilter]: (_, { payload }) => payload,\n});\n\nconst isLoadingAction = action => action.type.endsWith('Request');\nconst isEndLoadingAction = action =>\n\taction.type.endsWith('Success') || action.type.endsWith('Error');\nconst loading = createReducer(false, builder => {\n\tbuilder\n\t\t.addMatcher(isLoadingAction, () => true)\n\t\t.addMatcher(isEndLoadingAction, () => false);\n});\n\nexport default combineReducers({\n\titems,\n\tfilter,\n\tloading,\n});\n","import shortid from 'shortid';\nimport { connect } from 'react-redux';\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { notice } from '../../libs/pnotify';\nimport { FormGroup, Label, FormElement, Button, Input } from '../../Styles';\n\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\n\nconst initState = {\n\tname: '',\n\tphone: '',\n};\n\nclass Form extends Component {\n\tstate = initState;\n\n\tonInputChange = e => {\n\t\tconst { name, value } = e.target;\n\t\tthis.setState({ [name]: value });\n\t};\n\n\tonFormSubmit = e => {\n\t\te.preventDefault();\n\t\tconst { name, phone } = this.state;\n\t\tconst { contacts } = this.props;\n\t\tconst isContactExist = contacts.some(\n\t\t\tcontact => contact.name === name || contact.phone === phone,\n\t\t);\n\t\tif (isContactExist) {\n\t\t\tnotice({\n\t\t\t\ttitle: 'The contact is already in the list',\n\t\t\t\ttext: 'Please, add a contact with a different name or phone number',\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.props.onFormSubmit({ ...this.state });\n\t\tthis.setState(initState);\n\t};\n\n\trender() {\n\t\tconst inputNameId = shortid.generate();\n\t\tconst inputPhoneId = shortid.generate();\n\n\t\treturn (\n\t\t\t<FormElement onSubmit={this.onFormSubmit}>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Label htmlFor={inputNameId}>Name</Label>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tid={inputNameId}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\tvalue={this.state.name}\n\t\t\t\t\t\tonChange={this.onInputChange}\n\t\t\t\t\t\tpattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n\t\t\t\t\t\ttitle=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Label htmlFor={inputPhoneId}>Phone</Label>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tid={inputPhoneId}\n\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\tname=\"phone\"\n\t\t\t\t\t\tvalue={this.state.phone}\n\t\t\t\t\t\tonChange={this.onInputChange}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Button type=\"submit\">Add contact</Button>\n\t\t\t\t</FormGroup>\n\t\t\t</FormElement>\n\t\t);\n\t}\n}\n\nForm.propTypes = {\n\tonFormSubmit: PropTypes.func.isRequired,\n};\n\nconst mstp = state => ({\n\tcontacts: contactsSelectors.getAllContacts(state),\n});\n\nconst mdtp = dispatch => ({\n\tonFormSubmit: contact => dispatch(contactsOperations.addContact(contact)),\n});\n\nexport default connect(mstp, mdtp)(Form);\n","import styled from 'styled-components';\r\n\r\nexport const Li = styled.li`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n`;\r\nLi.displayName = 'Li';\r\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '../../Styles';\nimport { Li } from './styles';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\n\nconst ContactList = ({ contacts, loading, onDeleteClick, fetchContacts }) => {\n\tuseEffect(() => {\n\t\tfetchContacts();\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t{loading && <h3>Loading...</h3>}\n\t\t\t<h1>Contacts</h1>\n\t\t\t{contacts.length ? (\n\t\t\t\t<ul>\n\t\t\t\t\t{contacts.map(({ id, name, phone }) => (\n\t\t\t\t\t\t<Li key={id}>\n\t\t\t\t\t\t\t{name}: {phone}\n\t\t\t\t\t\t\t<Button onClick={() => onDeleteClick(id)}>\n\t\t\t\t\t\t\t\t<span className=\"material-icons\">delete</span>\n\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t) : (\n\t\t\t\t<p>There are no contacts yet...</p>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nContactList.defaultProps = {\n\tcontacts: [],\n};\n\nContactList.propTypes = {\n\tcontacts: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tid: PropTypes.string.isRequired,\n\t\t\tname: PropTypes.string.isRequired,\n\t\t\tphone: PropTypes.string.isRequired,\n\t\t}),\n\t),\n\tonDeleteClick: PropTypes.func.isRequired,\n};\n\nconst mstp = state => ({\n\tcontacts: contactsSelectors.getFilteredContacts(state),\n\tloading: contactsSelectors.getLoading(state),\n});\n\nconst mdtp = dispatch => ({\n\tonDeleteClick: id => dispatch(contactsOperations.deleteContact(id)),\n\tfetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mstp, mdtp)(ContactList);\n","import shortid from 'shortid';\nimport { connect } from 'react-redux';\nimport { FormElement, FormGroup, Input, Label } from '../../Styles';\nimport { contactsSelectors, contactsActions } from '../../redux/contacts';\n\nconst Filter = ({ value, onFilterInput }) => {\n\tconst inputFilterId = shortid.generate();\n\treturn (\n\t\t<FormElement>\n\t\t\t<FormGroup>\n\t\t\t\t<Label htmlFor={inputFilterId}>Filter</Label>\n\t\t\t\t<Input\n\t\t\t\t\tid={inputFilterId}\n\t\t\t\t\tname=\"filter\"\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tonChange={onFilterInput}\n\t\t\t\t/>\n\t\t\t</FormGroup>\n\t\t</FormElement>\n\t);\n};\n\nconst mstp = state => ({\n\tvalue: contactsSelectors.getFilter(state),\n});\n\nconst mdtp = dispatch => ({\n\tonFilterInput: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mstp, mdtp)(Filter);\n","import React from 'react';\r\n\r\nimport Form from './components/Form';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\n\r\nimport './App.css';\r\nimport { Container } from './Styles';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<React.StrictMode>\r\n\t\t\t<Container>\r\n\t\t\t\t<h1>Phonebook</h1>\r\n\t\t\t\t<Form />\r\n\t\t\t\t<Filter />\r\n\t\t\t\t<ContactList />\r\n\t\t\t</Container>\r\n\t\t</React.StrictMode>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n\t// persistStore,\n\t// persistReducer,\n\tFLUSH,\n\tREHYDRATE,\n\tPAUSE,\n\tPERSIST,\n\tPURGE,\n\tREGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\nimport { logger } from 'redux-logger/src';\n\nimport { contactsReducer } from './contacts';\n\n// const contactsPersistConfig = {\n// \tkey: 'contacts',\n// \tstorage,\n// \tblacklist: ['filter'],\n// };\n\nconst store = configureStore({\n\treducer: {\n\t\tcontacts: contactsReducer,\n\t},\n\tdevTools: process.env.NODE_ENV === 'development',\n\tmiddleware: [\n\t\t...getDefaultMiddleware({\n\t\t\tserializableCheck: {\n\t\t\t\tignoredActions: [\n\t\t\t\t\tFLUSH,\n\t\t\t\t\tREHYDRATE,\n\t\t\t\t\tPAUSE,\n\t\t\t\t\tPERSIST,\n\t\t\t\t\tPURGE,\n\t\t\t\t\tREGISTER,\n\t\t\t\t],\n\t\t\t},\n\t\t}),\n\t\tlogger,\n\t],\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t{/*<PersistGate loading={null} persistor={store.persistor}>*/}\n\t\t\t<App />\n\t\t\t{/*</PersistGate>*/}\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}